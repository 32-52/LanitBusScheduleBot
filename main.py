from enum import Enum

from telebot import types, TeleBot

import settings
from bus_schedule import LanitBusInfo, Locations, Destinations
from settings import logging


def keyboard_after_all():
    markup = types.ReplyKeyboardMarkup(
        one_time_keyboard=True, resize_keyboard=True)
    markup.add("/start")
    return markup


bot = TeleBot(settings.bot_token)


class Step(Enum):
    SELECT_DESTINATION = 'SELECT_DESTINATION'
    SELECT_LOCATION = 'SELECT_LOCATION'
    GET_SCHEDULE = 'GET_SCHEDULE'


@bot.callback_query_handler(func=lambda
        call: call.data in ["metro", "office", "mainmenu"] or call.data[:4] == "full")
def select_location_step(call):
    if call.data == "mainmenu":
        keyboardmain = types.InlineKeyboardMarkup(row_width=2)
        first_button = types.InlineKeyboardButton(
            text="–ö –º–µ—Ç—Ä–æ", callback_data="metro")
        second_button = types.InlineKeyboardButton(
            text="–í –æ—Ñ–∏—Å", callback_data="office")
        keyboardmain.add(first_button, second_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ö—É–¥–∞ –ø–æ–µ–¥–µ–º?",
                              reply_markup=keyboardmain)

    if call.data == "metro":
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        rele1 = types.InlineKeyboardButton(
            text="–ú–∞—Ä—å–∏–Ω–∞ —Ä–æ—â–∞", callback_data="m")
        rele2 = types.InlineKeyboardButton(text="–†–∏–∂—Å–∫–∞—è", callback_data="r")
        rele3 = types.InlineKeyboardButton(
            text="–ü–ª–æ—â–∞–¥—å –ò–ª—å–∏—á–∞", callback_data="p")
        backbutton = types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data="mainmenu")
        keyboard.row(rele3)
        keyboard.add(rele1, rele2, backbutton)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–ö–∞–∫–æ–µ –º–µ—Ç—Ä–æ –Ω—É–∂–Ω–æ?', reply_markup=keyboard)

    if call.data == "office":
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        rele1 = types.InlineKeyboardButton(
            text="–ú–∞—Ä—å–∏–Ω–∞ —Ä–æ—â–∞", callback_data="m_o")
        rele2 = types.InlineKeyboardButton(text="–†–∏–∂—Å–∫–∞—è", callback_data="r_o")
        rele3 = types.InlineKeyboardButton(
            text="–ü–ª–æ—â–∞–¥—å –ò–ª—å–∏—á–∞", callback_data="p_o")
        backbutton = types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data="mainmenu")
        keyboard.row(rele3)
        keyboard.add(rele1, rele2, backbutton)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–° –∫–∞–∫–æ–≥–æ –º–µ—Ç—Ä–æ –µ–¥–µ–º?', reply_markup=keyboard)

    if call.data[:4] == "full":
        keyboard = types.InlineKeyboardMarkup()
        backbutton = types.InlineKeyboardButton(
            text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="mainmenu")
        keyboard.add(backbutton)
        with open(f'resources/images/{call.data}.jpg', 'rb') as img:
            bot.send_photo(chat_id=call.message.chat.id, photo=img)


@bot.callback_query_handler(func=lambda call: call.data in ["m", "r", 'p', "m_o", "r_o", 'p_o'])
def select_destination_step_metro(call):
    keyboard = types.InlineKeyboardMarkup()
    backbutton = types.InlineKeyboardButton(
        text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="mainmenu")
    three_button = types.InlineKeyboardButton(
        text="–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"resources/images/fullSchedule_{call.data}")
    keyboard.add(backbutton, three_button)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=LanitBusInfo.get_nearest_bus(
                              location=Locations.MARINA_ROSHHA if 'm' in call.data else Locations.RIZHSKAJA
                              if 'r' in call.data else Locations.PLOSHHAD_ILICHA,
                              destination=Destinations.TO_METRO if '_o' not in call.data else Destinations.TO_OFFICE),
                          reply_markup=keyboard)


@bot.message_handler(commands=['start'])
def on_start(message):
    keyboardmain = types.InlineKeyboardMarkup(row_width=2)
    first_button = types.InlineKeyboardButton(
        text="–ö –º–µ—Ç—Ä–æ", callback_data="metro")
    second_button = types.InlineKeyboardButton(
        text="–í –æ—Ñ–∏—Å", callback_data="office")
    keyboardmain.add(first_button, second_button)
    bot.send_message(message.chat.id, "–ö—É–¥–∞ –ø–æ–µ–¥–µ–º?",
                     reply_markup=keyboardmain)


@bot.message_handler(func=lambda message: False if 'help' in message.text else True)
def echo_message(message):
    bot.reply_to(message, '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É :(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start')


@bot.message_handler(commands=['help'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    switch_button = types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç–µ–ª—å', url="https://t.me/ASvetlov92")
    btn_my_site = types.InlineKeyboardButton(text='GitHub', url='https://github.com/32-52/LanitBusScheduleBot')
    markup.add(switch_button, btn_my_site)
    bot.send_message(message.chat.id,
                     "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–πü§î\n"
                     "–ï—Å–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–µ–Ω, —Ç–æ –±—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥ –∑–≤–µ–∑–¥–æ—á–∫–µ‚≠ê",
                     reply_markup=markup)


if __name__ == "__main__":
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.warning(e)
            continue
